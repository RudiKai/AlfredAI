//+------------------------------------------------------------------+
//|                                                  AlfredBiasBot.mq5 |
//|             Expert Advisor generated by Echo for Rudi            |
//+------------------------------------------------------------------+
#property strict
#include <Trade\Trade.mqh>
CTrade trade;

// Input parameters
input int    FastMAPeriod    = 50;
input int    SlowMAPeriod    = 200;
input double StopLossFactor  = 1.5;      // Multiplier of ATR for SL
input double RiskPercent     = 1.0;      // Risk percentage per trade
input int    ATRPeriod       = 14;

input double BreakevenPoints = 20;       // Move SL to breakeven after X pips
input double PartialTPTake   = 0.5;      // Close 50% of position at 0.5Ã—SL
input double TrailingStart   = 30;       // Start trailing SL after 30 pips
input double TrailingStep    = 10;       // Trailing SL step in pips

input int    StartHour       = 8;        // Trading window start (server time)
input int    EndHour         = 17;       // Trading window end   (server time)

input ENUM_TIMEFRAMES MA_Timeframe  = PERIOD_M15;
input ENUM_TIMEFRAMES ATR_Timeframe = PERIOD_M15;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   Print("AlfredBiasBot initialized.");
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   Print("AlfredBiasBot deinitialized.");
  }

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   // Time filter
   MqlDateTime tm; TimeCurrent(tm);
   if(tm.hour < StartHour || tm.hour > EndHour) return;

   // Manage existing position or look for new entry
   if(PositionSelect(_Symbol))
     ManageOpenTrades();
   else if(CheckEntryConditions())
     EnterTrade();
  }

//+------------------------------------------------------------------+
//| Check entry conditions                                           |
//+------------------------------------------------------------------+
bool CheckEntryConditions()
  {
   // Placeholder: news-filter logic

   double maFast = iMA(_Symbol, MA_Timeframe, FastMAPeriod, 1, MODE_SMA, PRICE_CLOSE);
   double maSlow = iMA(_Symbol, MA_Timeframe, SlowMAPeriod, 1, MODE_SMA, PRICE_CLOSE);
   bool   bullishBias = maFast > maSlow;
   bool   bearishBias = !bullishBias;

   if(bullishBias && IsBullishEngulfing()) return(true);
   if(bearishBias && IsBearishEngulfing()) return(true);

   return(false);
  }

//+------------------------------------------------------------------+
//| Enter trade                                                      |
//+------------------------------------------------------------------+
void EnterTrade()
  {
   double atr          = iATR(_Symbol, ATR_Timeframe, ATRPeriod);
   double stopLossPips = atr * StopLossFactor / _Point;
   double riskMoney    = AccountInfoDouble(ACCOUNT_BALANCE) * RiskPercent / 100.0;

   // Lot calculation
   double tickValue = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
   double tickSize  = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);
   double lot       = riskMoney / (stopLossPips * tickValue / tickSize);
   lot = NormalizeDouble(lot, 2);

   // Determine direction
   bool bullish = iMA(_Symbol, MA_Timeframe, FastMAPeriod, 1, MODE_SMA, PRICE_CLOSE)
                > iMA(_Symbol, MA_Timeframe, SlowMAPeriod, 1, MODE_SMA, PRICE_CLOSE);

   double price = bullish ? SymbolInfoDouble(_Symbol, SYMBOL_ASK)
                          : SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double sl    = bullish
                  ? price - stopLossPips * _Point
                  : price + stopLossPips * _Point;
   double tp    = bullish
                  ? price + stopLossPips * 2 * _Point
                  : price - stopLossPips * 2 * _Point;

   if(bullish)
     trade.Buy(lot, NULL, price, sl, tp, "AlfredBiasBot");
   else
     trade.Sell(lot, NULL, price, sl, tp, "AlfredBiasBot");
  }

//+------------------------------------------------------------------+
//| Manage open trades                                               |
//+------------------------------------------------------------------+
void ManageOpenTrades()
  {
   if(!PositionSelect(_Symbol)) return;

   ulong  ticket    = PositionGetInteger(POSITION_TICKET);
   double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
   double slCurrent = PositionGetDouble(POSITION_SL);
   double tpCurrent = PositionGetDouble(POSITION_TP);
   int    posType   = PositionGetInteger(POSITION_TYPE);

   double priceNow = (posType == POSITION_TYPE_BUY)
                     ? SymbolInfoDouble(_Symbol, SYMBOL_BID)
                     : SymbolInfoDouble(_Symbol, SYMBOL_ASK);

   double profitPips = (posType == POSITION_TYPE_BUY)
                       ? (priceNow - openPrice) / _Point
                       : (openPrice - priceNow) / _Point;

   // Recalc ATR & SL distance
   double atr          = iATR(_Symbol, ATR_Timeframe, ATRPeriod);
   double stopLossPips = atr * StopLossFactor / _Point;

   // 1) Breakeven
   if(profitPips >= BreakevenPoints && slCurrent < openPrice)
     trade.PositionModify(ticket, openPrice, tpCurrent);

   // 2) Partial TP (placeholder)

   // 3) Trailing stop
   if(profitPips >= TrailingStart)
     {
      double newSL = (posType == POSITION_TYPE_BUY)
                     ? priceNow - TrailingStep * _Point
                     : priceNow + TrailingStep * _Point;

      bool shouldMod = (posType == POSITION_TYPE_BUY && newSL > slCurrent)
                    || (posType == POSITION_TYPE_SELL && newSL < slCurrent);

      if(shouldMod)
         trade.PositionModify(ticket, newSL, tpCurrent);
     }
  }

//+------------------------------------------------------------------+
//| Bullish engulfing pattern                                        |
//+------------------------------------------------------------------+
bool IsBullishEngulfing()
  {
   double op1 = iOpen(_Symbol, MA_Timeframe, 1), cl1 = iClose(_Symbol, MA_Timeframe, 1);
   double op0 = iOpen(_Symbol, MA_Timeframe, 0), cl0 = iClose(_Symbol, MA_Timeframe, 0);

   return(cl1 < op1 && op0 < cl1 && cl0 > op1);
  }

//+------------------------------------------------------------------+
//| Bearish engulfing pattern                                        |
//+------------------------------------------------------------------+
bool IsBearishEngulfing()
  {
   double op1 = iOpen(_Symbol, MA_Timeframe, 1), cl1 = iClose(_Symbol, MA_Timeframe, 1);
   double op0 = iOpen(_Symbol, MA_Timeframe, 0), cl0 = iClose(_Symbol, MA_Timeframe, 0);

   return(cl1 > op1 && op0 > cl1 && cl0 < op1);
  }
//+------------------------------------------------------------------+
