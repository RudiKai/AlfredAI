//+------------------------------------------------------------------+
//|               AlfredBiasBot_LocalTime_v5.0_Enhanced.mq5         |
//|  Enhanced version with structured logging, session‐boundary info,|
//|  indicator snapshots, event codes, and refined time logic.       |
//+------------------------------------------------------------------+
//–– declare the name your code expects ––
string _ProgramName = "AlfredBiasBot";


#property strict
#property version   "5.0"
#property description "Enhanced AlfredBiasBot with structured logging and refined session logic"
#include <Trade\Trade.mqh>

#define EVT_INIT  "[INIT]"
#define EVT_BAR   "[BAR]"
#define EVT_ENTRY "[ENTRY]"
#define EVT_EXIT  "[EXIT]"
#define EVT_TS    "[TS]"

//--- Inputs
input int      FastMAPeriod       = 50;     // Fast MA period
input int      SlowMAPeriod       = 151;    // Slow MA period
input int      ATRPeriod          = 14;     // ATR period
input ENUM_TIMEFRAMES Timeframe   = PERIOD_M15;
input double   LotSize            = 0.10;   // Fixed lot size
input double   ATRThreshold       = 0.00060; // ATR filter
input int      StartHour          = 1;      // Session start hour (local)
input int      StartMinute        = 0;      // Session start minute
input int      EndHour            = 23;     // Session end hour (local)
input int      EndMinute          = 30;     // Session end minute
input int      FridayCloseHour    = 22;     // Fri close hour (local)
input int      BreakEvenPips      = 40;     // Pips to BE
input int      TrailingStartPips  = 60;     // Pips to start session trail
input int      TrailingStopPips   = 20;     // Session trail distance
input int      OvernightTrailPips = 15;     // Overnight trail distance
input ulong    MagicNumber        = 1337;   // Magic for this EA
input bool     EnableLogging      = true;   // Verbose logging

//--- Globals
CTrade    trade;
int       hMAFast = INVALID_HANDLE, hMASlow = INVALID_HANDLE, hATR = INVALID_HANDLE;
double    pipValue;
string    symbolName;

input int SessionStartMin  =   5;    // 00:05 → 0*60 +  5
input int SessionEndMin    = 1435;  // 23:55 → 23*60 +55

//+------------------------------------------------------------------+
//| Expert initialization                                           |
//+------------------------------------------------------------------+
int OnInit()
  {
   symbolName = _Symbol;
   trade.SetExpertMagicNumber(MagicNumber);

   // compute pip-value
   pipValue = SymbolInfoDouble(symbolName, SYMBOL_POINT) *
              ((SymbolInfoInteger(symbolName, SYMBOL_DIGITS) % 2)!=0 ? 10 : 1);
   if(pipValue<=0.0)
     {
      PrintFormat("%s Failed to compute pip value for %s", EVT_INIT, symbolName);
      return(INIT_FAILED);
     }

   // create handles
   hMAFast = iMA(symbolName, Timeframe, FastMAPeriod, 0, MODE_SMA, PRICE_CLOSE);
   hMASlow = iMA(symbolName, Timeframe, SlowMAPeriod, 0, MODE_SMA, PRICE_CLOSE);
   hATR    = iATR(symbolName, Timeframe, ATRPeriod);
   if(hMAFast==INVALID_HANDLE || hMASlow==INVALID_HANDLE || hATR==INVALID_HANDLE)
     {
      PrintFormat("%s ❌ Failed to create indicators (Err=%d)", EVT_INIT, GetLastError());
      return(INIT_FAILED);
     }

   // log parameters & boundaries
   if(EnableLogging)
     {
      PrintFormat("%s %s initialized for %s", EVT_INIT, _ProgramName, symbolName);
      PrintFormat("%s Session boundaries %02d:%02d–%02d:%02d (Min:%d–%d)",
                  EVT_INIT,
                  StartHour, StartMinute, EndHour, EndMinute,
                  StartHour*60 + StartMinute,
                  EndHour*60   + EndMinute);
     }
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert deinitialization                                         |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   IndicatorRelease(hMAFast);
   IndicatorRelease(hMASlow);
   IndicatorRelease(hATR);
   PrintFormat("%s Deinitialized. Reason=%d", EVT_INIT, reason);
  }

//+------------------------------------------------------------------+
//| OnTick: new‐bar guard, logging, pass flags to trade routines    |
//+------------------------------------------------------------------+
void OnTick()
  {
    static datetime lastBarTime = 0;

    // server time right now
    datetime nowSrv = TimeTradeServer();
    if(nowSrv == lastBarTime)
      return;                // not a new bar yet
    lastBarTime = nowSrv;

    // break out struct for easy access
    MqlDateTime dt; TimeToStruct(nowSrv, dt);

    // calc session flags
    bool inSession = IsTradingSession();
    bool overnight = !inSession;

    // logging: shows you exactly what GMT+3 hour:minute & flags
    if(EnableLogging)
      PrintFormat(
        "[BAR] srv=%04d.%02d.%02d %02d:%02d (dow=%d) — InSession=%s | Overnight=%s",
        dt.year, dt.mon, dt.day,
        dt.hour, dt.min,
        dt.day_of_week,
        inSession  ? "YES" : "NO",
        overnight ? "YES" : "NO"
      );
  }
//+------------------------------------------------------------------+
//| Check & execute new entries                                     |
//+------------------------------------------------------------------+
void CheckForNewTrades(const MqlDateTime &loc, bool inSession)
  {
   if(!inSession)
     {
      if(EnableLogging) PrintFormat("%s — Outside session. Skipping entries.", EVT_BAR);
      return;
     }

   // fetch indicators on closed bar (index=1)
   double maF[1], maS[1], atrA[1];
   if(CopyBuffer(hMAFast,0,1,1,maF)<1 ||
      CopyBuffer(hMASlow,0,1,1,maS)<1 ||
      CopyBuffer(hATR,   0,1,1,atrA)<1)
     {
      PrintFormat("%s ❌ CopyBuffer failed", EVT_BAR);
      return;
     }

   double maFast = maF[0], maSlow = maS[0], atr = atrA[0];
   if(EnableLogging)
      PrintFormat("   %s Indcs: MA%d=%.5f MA%d=%.5f ATR=%.5f",
                  EVT_BAR,
                  FastMAPeriod, maFast,
                  SlowMAPeriod, maSlow,
                  atr);

   // ATR filter
   if(atr < ATRThreshold)
     {
      if(EnableLogging)
         PrintFormat("   %s ATR(%.5f) below threshold(%.5f). No trade.", EVT_BAR, atr, ATRThreshold);
      return;
     }

   // price vs MAs
   double ask = SymbolInfoDouble(symbolName, SYMBOL_ASK);
   double bid = SymbolInfoDouble(symbolName, SYMBOL_BID);
   bool bull = ask>maFast && ask>maSlow;
   bool bear = bid<maFast && bid<maSlow;

   // execute
   if(bull)
     {
      if(trade.Buy(LotSize, symbolName, ask, 0, 0, "AlfieBot BUY"))
         PrintFormat("%s Signal:BULL → BUY @%.5f", EVT_ENTRY, trade.ResultPrice());
      else
         PrintFormat("%s BUY failed (Err:%d %s)", EVT_ENTRY, trade.ResultRetcode(), trade.ResultComment());
     }
   else if(bear)
     {
      if(trade.Sell(LotSize, symbolName, bid, 0, 0, "AlfieBot SELL"))
         PrintFormat("%s Signal:BEAR → SELL @%.5f", EVT_ENTRY, trade.ResultPrice());
      else
         PrintFormat("%s SELL failed (Err:%d %s)", EVT_ENTRY, trade.ResultRetcode(), trade.ResultComment());
     }
  }

//+------------------------------------------------------------------+
//| Manage open positions                                            |
//+------------------------------------------------------------------+
void ManageOpenPositions(const MqlDateTime &loc, bool overnight)
  {
   double ask = SymbolInfoDouble(symbolName, SYMBOL_ASK);
   double bid = SymbolInfoDouble(symbolName, SYMBOL_BID);

   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      if(PositionGetTicket(i)<=0) continue;
      if(PositionGetString(POSITION_SYMBOL)!=symbolName) continue;
      if(PositionGetInteger(POSITION_MAGIC)!=MagicNumber) continue;

      ulong ticket    = PositionGetInteger(POSITION_TICKET);
      long  type      = PositionGetInteger(POSITION_TYPE);
      double openP    = PositionGetDouble(POSITION_PRICE_OPEN);
      double currSL   = PositionGetDouble(POSITION_SL);
      double currPrice= (type==POSITION_TYPE_BUY ? bid : ask);

      // 1) Friday close
      if(loc.day_of_week==FRIDAY && loc.hour>=FridayCloseHour)
        {
         PrintFormat("%s Fri-close → closing #%d", EVT_EXIT, ticket);
         trade.PositionClose(ticket);
         continue;
        }

      // 2) Reverse-bias exit
      double maF[1], maS[1];
      CopyBuffer(hMAFast,0,1,1,maF);
      CopyBuffer(hMASlow,0,1,1,maS);
      bool bull = ask>maF[0] && ask>maS[0];
      bool bear = bid<maF[0] && bid<maS[0];
      if((type==POSITION_TYPE_BUY && bear) || (type==POSITION_TYPE_SELL && bull))
        {
         PrintFormat("%s Reverse signal → closing #%d", EVT_EXIT, ticket);
         trade.PositionClose(ticket);
         continue;
        }

      // 3) Break-even
      double beDist = BreakEvenPips * pipValue;
      if(type==POSITION_TYPE_BUY && bid-openP>=beDist && currSL<openP)
         if(trade.PositionModify(ticket, openP, 0))
            { currSL=openP; PrintFormat("%s BE BUY #%d", EVT_TS, ticket); }
      else if(type==POSITION_TYPE_SELL && openP-ask>=beDist && (currSL==0||currSL>openP))
         if(trade.PositionModify(ticket, openP, 0))
            { currSL=openP; PrintFormat("%s BE SELL #%d", EVT_TS, ticket); }

      // 4) Trailing stop
      HandleTrailingStop(ticket, type, openP, currSL, currPrice, overnight);
     }
  }

//+------------------------------------------------------------------+
//| Trailing-stop logic                                              |
//+------------------------------------------------------------------+
void HandleTrailingStop(ulong ticket,long type,double openP,double currSL,double currPrice,bool overnight)
  {
   if(currSL<=0.0) return;

   double trailDist = (overnight ? OvernightTrailPips : TrailingStopPips) * pipValue;
   double startDist = TrailingStartPips * pipValue;
   double newSL     = currSL;

   // condition to start trailing
   bool canTrail = (overnight || 
                    (type==POSITION_TYPE_BUY && currPrice-openP>=startDist) ||
                    (type==POSITION_TYPE_SELL && openP-currPrice>=startDist));
   if(!canTrail) return;

   if(type==POSITION_TYPE_BUY && currPrice-trailDist>currSL)
      newSL = currPrice-trailDist;
   else if(type==POSITION_TYPE_SELL && currPrice+trailDist<currSL)
      newSL = currPrice+trailDist;

   if(newSL!=currSL)
      if(trade.PositionModify(ticket, newSL, 0))
         PrintFormat("%s %s Trail #%d → %.5f",
                     EVT_TS,
                     (overnight?"O/N":"Session"),
                     ticket, newSL);
  }

//+------------------------------------------------------------------+
//| Is it Mon–Fri between 00:05 and 23:55 server time (GMT+3)?       |
//+------------------------------------------------------------------+
bool IsTradingSession()
  {
    datetime nowSrv = TimeTradeServer();
    MqlDateTime dt; TimeToStruct(nowSrv, dt);

    // Only Monday–Friday
    if(dt.day_of_week < MONDAY || dt.day_of_week > FRIDAY)
      return false;

    // Total minutes since midnight
    int curMin = dt.hour*60 + dt.min;

    return (curMin >= SessionStartMin && curMin < SessionEndMin);
  }
//+------------------------------------------------------------------+
